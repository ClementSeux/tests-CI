#!/bin/bash

# Script de d√©ploiement automatis√© pour le microservice financier
# Usage: ./deploy.sh [staging|production]

set -e  # Arr√™ter en cas d'erreur

ENVIRONMENT=${1:-staging}
VERSION=${2:-$(date +%Y%m%d_%H%M%S)}
APP_DIR="/var/www/financial-microservice"
RELEASES_DIR="$APP_DIR/releases"
SHARED_DIR="$APP_DIR/shared"
CURRENT_LINK="$APP_DIR/current"
REPO_URL="https://github.com/votre-username/financial-microservice.git"

# S√©lection de la branche selon l'environnement
if [ "$ENVIRONMENT" = "production" ]; then
    BRANCH="main"
else
    BRANCH="develop"
fi

echo "üöÄ D√©ploiement en cours - Environnement: $ENVIRONMENT"

# Fonction de logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Fonction de rollback am√©lior√©e
rollback() {
    log "‚ùå Erreur d√©tect√©e - Rollback en cours..."
    if [ -L "$CURRENT_LINK" ]; then
        PREVIOUS_VERSION=$(ls -t "$RELEASES_DIR" | grep -v "^$VERSION$" | head -1)
        if [ -n "$PREVIOUS_VERSION" ] && [ -d "$RELEASES_DIR/$PREVIOUS_VERSION" ]; then
            rm -f "$CURRENT_LINK"
            ln -sf "$RELEASES_DIR/$PREVIOUS_VERSION" "$CURRENT_LINK"
            cd "$CURRENT_LINK"
            pm2 restart financial-microservice
            log "‚úÖ Rollback vers $PREVIOUS_VERSION termin√©"
        fi
    fi
    # Nettoyage de la version √©chou√©e
    rm -rf "$RELEASES_DIR/$VERSION"
    exit 1
}

# Pi√®ge pour rollback automatique en cas d'erreur
trap rollback ERR

# Cr√©ation des r√©pertoires n√©cessaires
mkdir -p "$RELEASES_DIR" "$SHARED_DIR/logs" "$SHARED_DIR/config"

# 1. Cr√©ation du r√©pertoire de release
RELEASE_DIR="$RELEASES_DIR/$VERSION"
log "üì¶ Pr√©paration de la release $VERSION..."
mkdir -p "$RELEASE_DIR"

# 2. Clone du nouveau code
log "üì• R√©cup√©ration du code source (branche: $BRANCH)..."
git clone -b "$BRANCH" "$REPO_URL" "$RELEASE_DIR"
cd "$RELEASE_DIR"

# 3. Installation des d√©pendances
log "üìö Installation des d√©pendances..."
npm ci --production

# 4. Ex√©cution des tests
log "üß™ Ex√©cution des tests..."
npm run test:ci

# 5. V√©rification de la couverture
log "üìä V√©rification de la couverture..."
npm run coverage:check

# 6. Build de l'application (si n√©cessaire)
log "üî® Build de l'application..."
# npm run build (si vous avez un processus de build)

# 7. Tests de sant√© pr√©-d√©ploiement
log "ü©∫ Tests de sant√© pr√©-d√©ploiement..."
# D√©marrage temporaire pour tests
PORT=3001 node index.js &
TEMP_PID=$!
sleep 5

# Test de l'endpoint de sant√©
if ! curl -f http://localhost:3001/health; then
    kill $TEMP_PID
    log "‚ùå Test de sant√© √©chou√©"
    exit 1
fi

# Test des endpoints principaux
if ! curl -f "http://localhost:3001/convert?from=EUR&to=USD&amount=100"; then
    kill $TEMP_PID
    log "‚ùå Test de l'endpoint /convert √©chou√©"
    exit 1
fi

kill $TEMP_PID
log "‚úÖ Tests de sant√© r√©ussis"

# 8. Arr√™t de l'ancienne version
log "‚èπÔ∏è Arr√™t de l'ancienne version..."
pm2 stop financial-microservice || true

# 9. D√©ploiement de la nouvelle version
log "üîÑ D√©ploiement de la nouvelle version..."
rm -rf "$APP_DIR/current"
mv "$APP_DIR/new" "$APP_DIR/current"
cd "$APP_DIR/current"

# 10. Red√©marrage avec PM2
log "üîÑ Red√©marrage de l'application..."
pm2 start ecosystem.config.js --env $ENVIRONMENT
pm2 save

# 11. Tests de sant√© post-d√©ploiement
log "ü©∫ Tests de sant√© post-d√©ploiement..."
sleep 10

for i in {1..5}; do
    if curl -f http://localhost:3000/health; then
        log "‚úÖ Service op√©rationnel"
        break
    else
        log "‚è≥ Tentative $i/5 - Service non encore disponible..."
        sleep 5
    fi
    
    if [ $i -eq 5 ]; then
        log "‚ùå Service non disponible apr√®s d√©ploiement"
        rollback
    fi
done

# 12. Tests fonctionnels post-d√©ploiement
log "üß™ Tests fonctionnels post-d√©ploiement..."
if ! curl -f "http://localhost:3000/convert?from=EUR&to=USD&amount=100"; then
    log "‚ùå Test fonctionnel √©chou√©"
    rollback
fi

# 13. Nettoyage
log "üßπ Nettoyage..."
rm -rf "$APP_DIR/previous"

# 14. Rechargement Nginx
log "üîÑ Rechargement Nginx..."
sudo nginx -t && sudo systemctl reload nginx

log "üéâ D√©ploiement termin√© avec succ√®s !"
log "üìä Statut PM2:"
pm2 status

log "üìà Logs en temps r√©el:"
echo "Pour suivre les logs: pm2 logs financial-microservice"
echo "Pour voir le statut: pm2 status"
echo "Pour red√©marrer: pm2 restart financial-microservice"
