name: CI/CD Pipeline - Microservice Conversion Financière

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

env:
    NODE_VERSION: "18.x"

jobs:
    # Job 1: Tests et Validation
    test-and-validate:
        runs-on: ubuntu-latest
        name: Tests et Validation

        steps:
            - name: Checkout du code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Installation des dépendances
              run: npm ci

            - name: Exécution des tests
              run: npm test

            - name: Génération du rapport de couverture
              run: npm run test:coverage

            - name: Vérification du seuil de couverture
              run: npm run coverage:check

            - name: Upload du rapport de couverture
              uses: codecov/codecov-action@v4
              if: env.CODECOV_TOKEN != ''
              with:
                  file: ./coverage/lcov.info
                  token: ${{ secrets.CODECOV_TOKEN }}

            - name: Audit de sécurité
              run: npm audit --audit-level=moderate

    # Job 2: Build et Préparation
    build:
        runs-on: ubuntu-latest
        needs: test-and-validate
        name: Build et Préparation

        steps:
            - name: Checkout du code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Installation des dépendances de production
              run: npm ci --production

            - name: Test de démarrage
              run: |
                  # Démarrage en arrière-plan
                  PORT=3001 NODE_ENV=test node index.js &
                  APP_PID=$!

                  # Attente du démarrage
                  sleep 5

                  # Test de santé
                  if curl -f "http://localhost:3001/health" >/dev/null 2>&1; then
                    echo "✅ Service démarre correctement"
                  else
                    echo "❌ Service ne démarre pas correctement"
                    exit 1
                  fi

                  # Arrêt propre du processus
                  kill $APP_PID
                  wait $APP_PID 2>/dev/null || true

                  # Attente pour s'assurer que tous les processus sont arrêtés
                  sleep 2

            - name: Nettoyage des processus
              run: |
                  # S'assurer qu'aucun processus Node.js ne tourne
                  pkill -f "node.*index.js" || true
                  sleep 1

            - name: Création de l'artifact de déploiement
              run: |
                  # Création d'un répertoire temporaire pour l'archive
                  mkdir -p /tmp/build-artifact

                  # Copie des fichiers nécessaires
                  cp -r . /tmp/build-artifact/ || true
                  cd /tmp/build-artifact

                  # Suppression des dossiers non nécessaires
                  rm -rf node_modules coverage .git tests .github

                  # Création de l'archive
                  tar -czf ../financial-microservice-${{ github.sha }}.tar.gz .

                  # Retour au répertoire de travail et copie de l'archive
                  cd $GITHUB_WORKSPACE
                  cp /tmp/financial-microservice-${{ github.sha }}.tar.gz .

            - name: Upload de l'artifact
              uses: actions/upload-artifact@v4
              with:
                  name: financial-microservice-${{ github.sha }}
                  path: financial-microservice-${{ github.sha }}.tar.gz
                  retention-days: 30

    # Job 3: Déploiement en Staging
    deploy-staging:
        runs-on: ubuntu-latest
        needs: [test-and-validate, build]
        name: Déploiement Staging
        if: github.ref == 'refs/heads/develop'
        environment: staging

        steps:
            - name: Checkout du code
              uses: actions/checkout@v4

            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                  name: financial-microservice-${{ github.sha }}

            - name: Déploiement sur serveur staging
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.STAGING_HOST }}
                  username: ${{ secrets.STAGING_USER }}
                  key: ${{ secrets.STAGING_SSH_KEY }}
                  port: ${{ secrets.STAGING_PORT }}
                  script: |
                      cd /var/www/financial-microservice
                      ./deploy/deploy.sh staging

            - name: Tests de santé post-déploiement
              run: |
                  sleep 30
                  curl -f "${{ secrets.STAGING_URL }}/health"
                  curl -f "${{ secrets.STAGING_URL }}/convert?from=EUR&to=USD&amount=100"

            - name: Notification (succès staging)
              if: success() && secrets.SLACK_WEBHOOK != ''
              uses: 8398a7/action-slack@v3
              with:
                  status: success
                  webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    # Job 4: Déploiement en Production
    deploy-production:
        runs-on: ubuntu-latest
        needs: [test-and-validate, build]
        name: Déploiement Production
        if: github.ref == 'refs/heads/main'
        environment: production

        steps:
            - name: Checkout du code
              uses: actions/checkout@v4

            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                  name: financial-microservice-${{ github.sha }}

            - name: Déploiement sur serveur production
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.PRODUCTION_HOST }}
                  username: ${{ secrets.PRODUCTION_USER }}
                  key: ${{ secrets.PRODUCTION_SSH_KEY }}
                  port: ${{ secrets.PRODUCTION_PORT }}
                  script: |
                      cd /var/www/financial-microservice
                      ./deploy/deploy.sh production

            - name: Tests de santé post-déploiement
              run: |
                  sleep 30
                  curl -f "${{ secrets.PRODUCTION_URL }}/health"
                  curl -f "${{ secrets.PRODUCTION_URL }}/convert?from=EUR&to=USD&amount=100"

            - name: Notification (succès production)
              if: success() && secrets.SLACK_WEBHOOK != ''
              uses: 8398a7/action-slack@v3
              with:
                  status: success
                  webhook_url: ${{ secrets.SLACK_WEBHOOK }}
