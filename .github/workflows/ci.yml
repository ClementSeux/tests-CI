name: CI/CD Pipeline - Microservice Conversion Financi√®re

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

env:
    NODE_VERSION: "18.x"

jobs:
    # Job 1: Tests et Validation
    test-and-validate:
        runs-on: ubuntu-latest
        name: Tests et Validation

        steps:
            - name: Checkout du code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Installation des d√©pendances
              run: npm ci

            - name: Ex√©cution des tests
              run: npm test

            - name: G√©n√©ration du rapport de couverture
              run: npm run test:coverage

            - name: V√©rification du seuil de couverture
              run: npm run coverage:check

            - name: Archive du rapport de couverture
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-report
                  path: coverage/
                  retention-days: 7

            - name: Audit de s√©curit√©
              run: npm audit --audit-level=moderate

    # Job 2: Build et Pr√©paration
    build:
        runs-on: ubuntu-latest
        needs: test-and-validate
        name: Build et Pr√©paration

        steps:
            - name: Checkout du code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Installation des d√©pendances de production
              run: npm ci --production

            - name: Test de d√©marrage
              run: |
                  # D√©marrage en arri√®re-plan sur un port sp√©cifique
                  PORT=3001 NODE_ENV=test timeout 15s node index.js &
                  APP_PID=$!

                  # Attente du d√©marrage
                  sleep 5

                  # Test de sant√© avec retry
                  for i in {1..5}; do
                    if curl -f "http://localhost:3001/health" >/dev/null 2>&1; then
                      echo "‚úÖ Service d√©marre correctement"
                      break
                    elif [ $i -eq 5 ]; then
                      echo "‚ùå Service ne d√©marre pas correctement apr√®s 5 tentatives"
                      exit 1
                    else
                      echo "Tentative $i/5 - En attente..."
                      sleep 2
                    fi
                  done

                  # Arr√™t propre du processus
                  kill $APP_PID 2>/dev/null || true
                  wait $APP_PID 2>/dev/null || true

            - name: Nettoyage final des processus
              run: |
                  # Nettoyage de tous les processus Node.js restants
                  pkill -f "node.*index.js" 2>/dev/null || true
                  sleep 2

            - name: Cr√©ation de l'artifact de d√©ploiement
              run: |
                  # Cr√©ation d'un r√©pertoire temporaire propre
                  BUILD_DIR="/tmp/financial-microservice-build"
                  rm -rf "$BUILD_DIR"
                  mkdir -p "$BUILD_DIR"

                  # Copie s√©lective des fichiers n√©cessaires
                  echo "üìÅ Copie des fichiers essentiels..."
                  cp package.json "$BUILD_DIR/"
                  cp index.js "$BUILD_DIR/"
                  cp -r src/ "$BUILD_DIR/" 2>/dev/null || true
                  cp ecosystem.config.js "$BUILD_DIR/" 2>/dev/null || true
                  cp README.md "$BUILD_DIR/" 2>/dev/null || true

                  # Cr√©ation de l'archive depuis le r√©pertoire de build
                  cd "$BUILD_DIR"
                  tar -czf "/tmp/financial-microservice-${{ github.sha }}.tar.gz" .

                  # Copie vers le workspace
                  cp "/tmp/financial-microservice-${{ github.sha }}.tar.gz" "$GITHUB_WORKSPACE/"

                  echo "‚úÖ Artifact cr√©√©: financial-microservice-${{ github.sha }}.tar.gz"

            - name: Upload de l'artifact
              uses: actions/upload-artifact@v4
              with:
                  name: financial-microservice-${{ github.sha }}
                  path: financial-microservice-${{ github.sha }}.tar.gz
                  retention-days: 30

    # Job 3: D√©ploiement en Staging
    deploy-staging:
        runs-on: ubuntu-latest
        needs: [test-and-validate, build]
        name: D√©ploiement Staging
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

        steps:
            - name: Checkout du code
              uses: actions/checkout@v4

            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                  name: financial-microservice-${{ github.sha }}

            - name: D√©ploiement sur serveur staging
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.STAGING_HOST }}
                  username: ${{ secrets.STAGING_USER }}
                  key: ${{ secrets.STAGING_SSH_KEY }}
                  port: ${{ secrets.STAGING_PORT }}
                  timeout: 30s
                  command_timeout: 10m
                  debug: true
                  script: |
                      echo "üè† Current directory: $(pwd)"
                      echo "üë§ Current user: $(whoami)"
                      echo "üîë SSH connection successful!"
                      echo "üìÅ Setting up application directory..."

                      # Create application directory structure
                      sudo mkdir -p /var/www/financial-microservice/{releases,shared/logs,shared/config}
                      sudo chown -R $(whoami):$(whoami) /var/www/financial-microservice

                      # Create release directory
                      VERSION=$(date +%Y%m%d_%H%M%S)
                      RELEASE_DIR="/var/www/financial-microservice/releases/$VERSION"
                      mkdir -p "$RELEASE_DIR"

                      echo "üì¶ Preparing release $VERSION..."

                      # Clone repository for deployment
                      git clone https://github.com/${{ github.repository }}.git "$RELEASE_DIR"
                      cd "$RELEASE_DIR"

                      # Install dependencies
                      echo "üìö Installing dependencies..."
                      npm ci --production

                      # Copy ecosystem config for PM2
                      cp ecosystem.config.js "$RELEASE_DIR/" || echo "No ecosystem.config.js found"

                      # Stop old application
                      pm2 stop financial-microservice || echo "App not running"

                      # Update symlink
                      rm -f /var/www/financial-microservice/current
                      ln -sf "$RELEASE_DIR" /var/www/financial-microservice/current

                      # Start application with PM2
                      cd /var/www/financial-microservice/current
                      if [ "${{ github.ref_name }}" = "develop" ]; then
                          PORT=3000 pm2 start ecosystem.config.js --name financial-microservice-staging --env staging
                      else
                          PORT=3001 pm2 start ecosystem.config.js --name financial-microservice-production --env production  
                      fi

                      pm2 save

                      echo "‚úÖ Deployment completed successfully!"
                      echo "üìä PM2 Status:"
                      pm2 status

            - name: Tests de sant√© post-d√©ploiement
              run: |
                  sleep 30
                  curl -f "${{ secrets.STAGING_URL }}/health"
                  curl -f "${{ secrets.STAGING_URL }}/convert?from=EUR&to=USD&amount=100"

    # Job 4: D√©ploiement en Production
    deploy-production:
        runs-on: ubuntu-latest
        needs: [test-and-validate, build]
        name: D√©ploiement Production
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        steps:
            - name: Checkout du code
              uses: actions/checkout@v4

            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                  name: financial-microservice-${{ github.sha }}

            - name: D√©ploiement sur serveur production
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.PRODUCTION_HOST }}
                  username: ${{ secrets.PRODUCTION_USER }}
                  key: ${{ secrets.PRODUCTION_SSH_KEY }}
                  port: ${{ secrets.PRODUCTION_PORT }}
                  timeout: 30s
                  command_timeout: 10m
                  debug: true
                  script: |
                      echo "üè† Current directory: $(pwd)"
                      echo "üë§ Current user: $(whoami)"
                      echo "üîë SSH connection successful!"
                      echo "üìÅ Setting up application directory..."

                      # Create application directory structure
                      sudo mkdir -p /var/www/financial-microservice/{releases,shared/logs,shared/config}
                      sudo chown -R $(whoami):$(whoami) /var/www/financial-microservice

                      # Create release directory
                      VERSION=$(date +%Y%m%d_%H%M%S)
                      RELEASE_DIR="/var/www/financial-microservice/releases/$VERSION"
                      mkdir -p "$RELEASE_DIR"

                      echo "üì¶ Preparing release $VERSION..."

                      # Clone repository for deployment
                      git clone https://github.com/${{ github.repository }}.git "$RELEASE_DIR"
                      cd "$RELEASE_DIR"

                      # Install dependencies
                      echo "üìö Installing dependencies..."
                      npm ci --production

                      # Copy ecosystem config for PM2
                      cp ecosystem.config.js "$RELEASE_DIR/" || echo "No ecosystem.config.js found"

                      # Stop old application
                      pm2 stop financial-microservice-production || echo "App not running"

                      # Update symlink
                      rm -f /var/www/financial-microservice/current
                      ln -sf "$RELEASE_DIR" /var/www/financial-microservice/current

                      # Start application with PM2
                      cd /var/www/financial-microservice/current
                      PORT=3001 pm2 start ecosystem.config.js --name financial-microservice-production --env production

                      pm2 save

                      echo "‚úÖ Deployment completed successfully!"
                      echo "üìä PM2 Status:"
                      pm2 status

            - name: Tests de sant√© post-d√©ploiement
              run: |
                  sleep 30
                  curl -f "${{ secrets.PRODUCTION_URL }}/health"
                  curl -f "${{ secrets.PRODUCTION_URL }}/convert?from=EUR&to=USD&amount=100"
