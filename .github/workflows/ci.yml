name: CI/CD Pipeline - Microservice Conversion Financière

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'

jobs:
  # Job 1: Tests et Validation
  test-and-validate:
    runs-on: ubuntu-latest
    name: Tests et Validation
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Installation des dépendances
      run: npm ci

    - name: Exécution des tests
      run: npm test

    - name: Génération du rapport de couverture
      run: npm run test:coverage

    - name: Vérification du seuil de couverture
      run: npm run coverage:check

    - name: Upload du rapport de couverture
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Audit de sécurité
      run: npm audit --audit-level=moderate

  # Job 2: Build et Préparation
  build:
    runs-on: ubuntu-latest
    needs: test-and-validate
    name: Build et Préparation
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Installation des dépendances de production
      run: npm ci --production

    - name: Test de démarrage
      run: |
        timeout 10s npm start || if [ $? -eq 124 ]; then echo "✅ Service démarre correctement"; else exit 1; fi

    - name: Création de l'artifact de déploiement
      run: |
        tar -czf financial-microservice-${{ github.sha }}.tar.gz \
          --exclude=node_modules \
          --exclude=coverage \
          --exclude=.git \
          --exclude=tests \
          .

    - name: Upload de l'artifact
      uses: actions/upload-artifact@v4
      with:
        name: financial-microservice-${{ github.sha }}
        path: financial-microservice-${{ github.sha }}.tar.gz
        retention-days: 30

  # Job 3: Déploiement en Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-and-validate, build]
    name: Déploiement Staging
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: financial-microservice-${{ github.sha }}

    - name: Déploiement sur serveur staging
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /var/www/financial-microservice
          ./deploy/deploy.sh staging

    - name: Tests de santé post-déploiement
      run: |
        sleep 30
        curl -f "${{ secrets.STAGING_URL }}/health"
        curl -f "${{ secrets.STAGING_URL }}/convert?from=EUR&to=USD&amount=100"

    - name: Notification Slack (succès staging)
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 4: Tests d'intégration sur Staging
  integration-tests-staging:
    runs-on: ubuntu-latest
    needs: deploy-staging
    name: Tests d'intégration Staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Installation des dépendances de test
      run: npm ci

    - name: Tests d'intégration contre staging
      run: |
        export TEST_BASE_URL=${{ secrets.STAGING_URL }}
        npm run test:integration

  # Job 5: Déploiement en Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-and-validate, build]
    name: Déploiement Production
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: financial-microservice-${{ github.sha }}

    - name: Déploiement sur serveur production
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /var/www/financial-microservice
          ./deploy/deploy.sh production

    - name: Tests de santé post-déploiement
      run: |
        sleep 30
        curl -f "${{ secrets.PRODUCTION_URL }}/health"
        curl -f "${{ secrets.PRODUCTION_URL }}/convert?from=EUR&to=USD&amount=100"

    - name: Notification Slack (succès production)
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 6: Tests E2E sur Production
  e2e-tests-production:
    runs-on: ubuntu-latest
    needs: deploy-production
    name: Tests E2E Production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Installation des dépendances de test
      run: npm ci

    - name: Tests E2E contre production
      run: |
        export TEST_BASE_URL=${{ secrets.PRODUCTION_URL }}
        npm run test:e2e

    - name: Notification finale
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
