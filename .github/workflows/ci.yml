name: CI/CD Pipeline - Microservice Conversion Financi√®re

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  COVERAGE_THRESHOLD: 80

jobs:
  # Job 1: Tests et Validation
  test-and-validate:
    runs-on: ubuntu-latest
    name: Tests et Validation
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Installation des d√©pendances
      run: npm ci

    - name: Ex√©cution des tests
      run: npm test

    - name: G√©n√©ration du rapport de couverture
      run: npm run test:coverage

    - name: V√©rification du seuil de couverture
      run: npm run coverage:check

    - name: Upload du rapport de couverture
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

    - name: Audit de s√©curit√©
      run: npm audit --audit-level=moderate

  # Job 2: Build et Pr√©paration
  build:
    runs-on: ubuntu-latest
    needs: test-and-validate
    name: Build et Pr√©paration
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Installation des d√©pendances de production
      run: npm ci --production

    - name: Test de d√©marrage
      run: |
        timeout 10s npm start || if [ $? -eq 124 ]; then echo "‚úÖ Service d√©marre correctement"; else exit 1; fi

    - name: Cr√©ation de l'artifact de d√©ploiement
      run: |
        tar -czf financial-microservice-${{ github.sha }}.tar.gz \
          --exclude=node_modules \
          --exclude=coverage \
          --exclude=.git \
          --exclude=tests \
          .

    - name: Upload de l'artifact
      uses: actions/upload-artifact@v3
      with:
        name: financial-microservice-${{ github.sha }}
        path: financial-microservice-${{ github.sha }}.tar.gz

  # Job 3: D√©ploiement en Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-and-validate, build]
    name: D√©ploiement Staging
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: financial-microservice-${{ github.sha }}

    - name: D√©ploiement sur serveur staging
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /var/www/financial-microservice
          ./deploy/deploy.sh staging

    - name: Tests de sant√© post-d√©ploiement
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_URL }}/health
        curl -f "${{ secrets.STAGING_URL }}/convert?from=EUR&to=USD&amount=100"

    - name: Notification Slack (succ√®s staging)
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "‚úÖ D√©ploiement staging r√©ussi - ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Job 4: Tests d'int√©gration sur Staging
  integration-tests-staging:
    runs-on: ubuntu-latest
    needs: deploy-staging
    name: Tests d'Int√©gration Staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Installation des d√©pendances de test
      run: npm ci

    - name: Tests E2E sur staging
      env:
        API_BASE_URL: ${{ secrets.STAGING_URL }}
      run: npm run test:e2e

    - name: Tests de charge l√©gers
      run: |
        npx artillery quick --count 10 --num 5 ${{ secrets.STAGING_URL }}/health

  # Job 5: D√©ploiement en Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-and-validate, build]
    name: D√©ploiement Production
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: financial-microservice-${{ github.sha }}

    - name: D√©ploiement sur serveur production
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /var/www/financial-microservice
          ./deploy/deploy.sh production

    - name: Tests de sant√© post-d√©ploiement production
      run: |
        sleep 30
        for i in {1..5}; do
          if curl -f ${{ secrets.PRODUCTION_URL }}/health; then
            echo "‚úÖ Service production op√©rationnel"
            break
          else
            echo "‚è≥ Tentative $i/5..."
            sleep 10
          fi
        done

    - name: Tests fonctionnels production
      run: |
        curl -f "${{ secrets.PRODUCTION_URL }}/convert?from=EUR&to=USD&amount=100"
        curl -f "${{ secrets.PRODUCTION_URL }}/tva?ht=100&taux=20"
        curl -f "${{ secrets.PRODUCTION_URL }}/remise?prix=100&pourcentage=10"

    - name: Notification Slack (succ√®s production)
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "üöÄ D√©ploiement production r√©ussi - ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Job 6: Rollback automatique en cas d'√©chec
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    name: Rollback Automatique
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Rollback production
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /var/www/financial-microservice
          if [ -d "previous" ]; then
            rm -rf current
            mv previous current
            pm2 restart financial-microservice
            echo "‚úÖ Rollback effectu√©"
          fi

    - name: Notification Slack (rollback)
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "üîÑ Rollback automatique effectu√© - ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Job 7: Monitoring et Alertes
  monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    name: Monitoring Post-D√©ploiement
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Tests de monitoring
      run: |
        # Test de performance
        curl -w "@-" -o /dev/null -s "${{ secrets.PRODUCTION_URL }}/health" <<'EOF'
        time_total: %{time_total}s
        time_connect: %{time_connect}s
        time_starttransfer: %{time_starttransfer}s
        http_code: %{http_code}
        EOF

    - name: Notification de succ√®s complet
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          üéâ D√©ploiement complet r√©ussi !
          üìä Commit: ${{ github.sha }}
          üîó URL: ${{ secrets.PRODUCTION_URL }}
          ‚úÖ Tous les tests pass√©s
          üìà Monitoring actif
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
